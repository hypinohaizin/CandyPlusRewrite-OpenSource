package me.hypinohaizin.candyplusrewrite.module.exploit;

import me.hypinohaizin.candyplusrewrite.module.Module;
import me.hypinohaizin.candyplusrewrite.setting.Setting;
import me.hypinohaizin.candyplusrewrite.utils.Timer;
import net.minecraft.network.play.client.CPacketPlayer;
import net.minecraft.util.math.MathHelper;

public class CornerClip extends Module {
    public Setting<Boolean> autoDisable;
    public Setting<Float> disableAfter;

    private final Timer timer = new Timer();

    public CornerClip() {
        super("CornerClip", Categories.EXPLOIT, false, false);
        autoDisable = register(new Setting<>("AutoDisable", false));
        disableAfter = register(new Setting<>("DisableAfter", 1.0f, 5.0f, 0.1f, v -> autoDisable.getValue()));
    }

    public double roundToClosest(double num, double low, double high) {
        double d2 = high - num;
        double d1 = num - low;
        return d2 > d1 ? low : high;
    }

    public boolean isMoving() {
        return mc.gameSettings.keyBindForward.isKeyDown()
                || mc.gameSettings.keyBindBack.isKeyDown()
                || mc.gameSettings.keyBindLeft.isKeyDown()
                || mc.gameSettings.keyBindRight.isKeyDown();
    }

    @Override
    public void onEnable() {
        timer.reset();
    }

    @Override
    public void onUpdate() {
        if (nullCheck() || isMoving()) return;

        if (autoDisable.getValue() && timer.passedMs((long) (disableAfter.getValue() * 1000.0f))) {
            disable();
            return;
        }

        if (mc.world.getCollisionBoxes(mc.player, mc.player.getEntityBoundingBox().grow(0.01, 0.0, 0.01)).size() < 2) {
            mc.player.setPosition(
                    roundToClosest(mc.player.posX, Math.floor(mc.player.posX) + 0.301, Math.floor(mc.player.posX) + 0.699),
                    mc.player.posY,
                    roundToClosest(mc.player.posZ, Math.floor(mc.player.posZ) + 0.301, Math.floor(mc.player.posZ) + 0.699)
            );
        } else if (mc.player.ticksExisted % 5 == 0) {
            mc.player.setPosition(
                    mc.player.posX + MathHelper.clamp(
                            roundToClosest(mc.player.posX, Math.floor(mc.player.posX) + 0.241, Math.floor(mc.player.posX) + 0.759) - mc.player.posX,
                            -0.03, 0.03
                    ),
                    mc.player.posY,
                    mc.player.posZ + MathHelper.clamp(
                            roundToClosest(mc.player.posZ, Math.floor(mc.player.posZ) + 0.241, Math.floor(mc.player.posZ) + 0.759) - mc.player.posZ,
                            -0.03, 0.03
                    )
            );
            mc.player.connection.sendPacket(new CPacketPlayer.Position(mc.player.posX, mc.player.posY, mc.player.posZ, true));
            mc.player.connection.sendPacket(new CPacketPlayer.Position(
                    roundToClosest(mc.player.posX, Math.floor(mc.player.posX) + 0.23, Math.floor(mc.player.posX) + 0.77),
                    mc.player.posY,
                    roundToClosest(mc.player.posZ, Math.floor(mc.player.posZ) + 0.23, Math.floor(mc.player.posZ) + 0.77),
                    true
            ));
        }
    }
}
