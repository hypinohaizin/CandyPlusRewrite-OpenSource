package me.hypinohaizin.candyplusrewrite.module.exploit;

import net.minecraft.entity.item.EntityEnderCrystal;
import net.minecraft.entity.Entity;

import java.util.ArrayList;
import net.minecraft.init.SoundEvents;
import net.minecraft.util.SoundCategory;
import net.minecraft.network.play.server.SPacketSoundEffect;
import net.minecraftforge.fml.common.eventhandler.EventPriority;
import net.minecraftforge.fml.common.eventhandler.SubscribeEvent;
import net.minecraft.network.Packet;
import net.minecraft.network.play.client.CPacketUpdateSign;
import net.minecraft.network.play.client.CPacketAnimation;
import net.minecraft.network.status.client.CPacketPing;
import me.hypinohaizin.candyplusrewrite.event.events.network.PacketEvent;
import me.hypinohaizin.candyplusrewrite.setting.Setting;
import me.hypinohaizin.candyplusrewrite.module.Module;

public class PingBypass extends Module
{
    public Setting<Boolean> ping;
    public Setting<Boolean> animation;
    public Setting<Boolean> sign;
    public Setting<Boolean> crystal;
    public Setting<Boolean> remove;
    
    public PingBypass() {
        super("PingBypass", Categories.EXPLOIT, false, false);
        ping = register(new Setting<>("Ping", true));
        animation = register(new Setting<>("Animation", true));
        sign = register(new Setting<>("Sign", true));
        crystal = register(new Setting<>("Crystal", true));
        remove = register(new Setting<>("Remove", true, v -> crystal.getValue()));
    }
    
    @SubscribeEvent(priority = EventPriority.HIGH)
    @Override
    public void onPacketSend(final PacketEvent.Send event) {
        if (!isEnable) {
            return;
        }
        final Packet packet = event.getPacket();
        if (packet instanceof CPacketPing && ping.getValue()) {
            event.cancel();
        }
        if (packet instanceof CPacketAnimation && animation.getValue()) {
            event.cancel();
        }
        if (packet instanceof CPacketUpdateSign && sign.getValue()) {
            event.cancel();
        }
    }
    
    @SubscribeEvent(priority = EventPriority.HIGH)
    @Override
    public void onPacketReceive(final PacketEvent.Receive event) {
        if (!isEnable) {
            return;
        }
        if (crystal.getValue() && event.getPacket() instanceof SPacketSoundEffect && ((SPacketSoundEffect)event.getPacket()).getCategory() == SoundCategory.BLOCKS && ((SPacketSoundEffect)event.getPacket()).getSound() == SoundEvents.ENTITY_GENERIC_EXPLODE) {
            for (final Entity crystal : new ArrayList<>(PingBypass.mc.world.loadedEntityList)) {
                if (crystal instanceof EntityEnderCrystal) {
                    if (remove.getValue()) {
                        PingBypass.mc.world.removeEntityFromWorld(crystal.getEntityId());
                    }
                    else {
                        crystal.setDead();
                    }
                }
            }
        }
    }
}
