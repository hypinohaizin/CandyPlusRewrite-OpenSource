package me.hypinohaizin.candyplusrewrite.module.exploit;

import net.minecraft.network.play.client.CPacketHeldItemChange;
import net.minecraft.util.math.AxisAlignedBB;
import net.minecraft.entity.item.EntityItem;
import me.hypinohaizin.candyplusrewrite.utils.BlockUtil;
import net.minecraft.util.EnumHand;
import net.minecraft.entity.Entity;
import net.minecraft.network.play.client.CPacketEntityAction;
import net.minecraft.network.play.client.CPacketPlayer;
import me.hypinohaizin.candyplusrewrite.utils.InventoryUtil;
import net.minecraft.init.Blocks;
import net.minecraft.util.math.BlockPos;
import me.hypinohaizin.candyplusrewrite.setting.Setting;
import me.hypinohaizin.candyplusrewrite.module.Module;

public class Burrow extends Module
{
    private final Setting<Float> offset;
    private final Setting<Boolean> sneak;
    private final Setting<Boolean> echest;
    private final Setting<Boolean> sushiBypass;
    private BlockPos originalPos;
    private int oldSlot;
    
    public Burrow() {
        super("Burrow", Categories.EXPLOIT, false, false);
        offset = register(new Setting<>("Offset", 7.0f, 30.0f, (-20.0f)));
        sneak = register(new Setting<>("Sneak", false));
        echest = register(new Setting<>("EChest", false));
        sushiBypass = register(new Setting<>("Bypass", false));
        oldSlot = -1;
    }
    
    @Override
    public void onEnable() {
        super.onEnable();
        originalPos = new BlockPos(Burrow.mc.player.posX, Burrow.mc.player.posY, Burrow.mc.player.posZ);
        if (Burrow.mc.world.getBlockState(new BlockPos(Burrow.mc.player.posX, Burrow.mc.player.posY, Burrow.mc.player.posZ)).getBlock().equals(Blocks.OBSIDIAN) || intersectsWithEntity(originalPos)) {
            toggle();
            return;
        }
        oldSlot = Burrow.mc.player.inventory.currentItem;
    }
    
    @Override
    public void onTick() {
        if ((InventoryUtil.findHotbarBlock(Blocks.OBSIDIAN) == -1 && !echest.getValue()) || (InventoryUtil.findHotbarBlock(Blocks.ENDER_CHEST) == -1 && echest.getValue())) {
            sendMessage("Can't find material in hotbar!");
            toggle();
            return;
        }
        switchToSlot(InventoryUtil.findHotbarBlock(echest.getValue() ? Blocks.ENDER_CHEST : Blocks.OBSIDIAN));
        Burrow.mc.player.connection.sendPacket(new CPacketPlayer.Position(Burrow.mc.player.posX, Burrow.mc.player.posY + 0.41999998688698, Burrow.mc.player.posZ, true));
        Burrow.mc.player.connection.sendPacket(new CPacketPlayer.Position(Burrow.mc.player.posX, Burrow.mc.player.posY + 0.7531999805211997, Burrow.mc.player.posZ, true));
        Burrow.mc.player.connection.sendPacket(new CPacketPlayer.Position(Burrow.mc.player.posX, Burrow.mc.player.posY + 1.00133597911214, Burrow.mc.player.posZ, true));
        Burrow.mc.player.connection.sendPacket(new CPacketPlayer.Position(Burrow.mc.player.posX, Burrow.mc.player.posY + 1.16610926093821, Burrow.mc.player.posZ, true));
        final boolean sneaking = Burrow.mc.player.isSneaking();
        if (sneak.getValue() && sneaking) {
            Burrow.mc.player.connection.sendPacket(new CPacketEntityAction(Burrow.mc.player, CPacketEntityAction.Action.START_SNEAKING));
        }
        BlockUtil.placeBlock(originalPos, EnumHand.MAIN_HAND, false, true, sneaking);
        if (sushiBypass.getValue()) {
            Burrow.mc.player.connection.sendPacket(new CPacketPlayer.Position(Burrow.mc.player.posX, Burrow.mc.player.posY - 1.11, Burrow.mc.player.posZ, false));
        }
        Burrow.mc.player.connection.sendPacket(new CPacketPlayer.Position(Burrow.mc.player.posX, Burrow.mc.player.posY + offset.getValue(), Burrow.mc.player.posZ, false));
        switchToSlot(oldSlot);
        if (sneak.getValue() && sneaking) {
            Burrow.mc.player.connection.sendPacket(new CPacketEntityAction(Burrow.mc.player, CPacketEntityAction.Action.STOP_SNEAKING));
        }
        toggle();
    }
    
    private boolean intersectsWithEntity(final BlockPos pos) {
        for (final Entity entity : Burrow.mc.world.loadedEntityList) {
            if (entity.equals(Burrow.mc.player)) {
                continue;
            }
            if (entity instanceof EntityItem) {
                continue;
            }
            if (new AxisAlignedBB(pos).intersects(entity.getEntityBoundingBox())) {
                return true;
            }
        }
        return false;
    }
    
    public static void switchToSlot(final int slot) {
        Burrow.mc.player.connection.sendPacket(new CPacketHeldItemChange(slot));
        Burrow.mc.player.inventory.currentItem = slot;
        Burrow.mc.playerController.updateController();
    }
}
